name: CI

on:
  push:
    branches:
      - master
    paths-ignore:
      - '**/*.md'
      - 'LICENSE'
      - '**/.gitignore'
      - 'Dockerfile'
      - '.dockerignore'
  pull_request:
    paths-ignore:
      - '**/*.md'
      - 'LICENSE'
      - '**/.gitignore'
      - 'Dockerfile'
      - '.dockerignore'

jobs:
  test:
    name: Test with Go version ${{ matrix.go }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ 'ubuntu-latest' ]
        go: [ '1.13', '1.12' ]

    steps:
    - name: Set up Go ${{ matrix.go }}
      id: setup-go
      uses: actions/setup-go@v2-beta
      with:
        go-version: ${{ matrix.go }}

    - name: Check out code into the Go module directory
      id: checkout
      uses: actions/checkout@v2

    - name: Cache dependencies and tools
      id: cache
      uses: actions/cache@v1
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependency go modules
      id: mod-dl
      run: make mod-dl

    - name: Install go tools on module-aware mode
      id: mod-tools-install
      run: GOBIN=${GITHUB_WORKSPACE}/bin make mod-tools-install

    - name: Add GITHUB_WORKSPACE/bin into PATH
      id: add-gobin-path
      run: echo "::add-path::${GITHUB_WORKSPACE}/bin"

    - name: Run tests and linters
      id: ci
      run: make ci

    - name: Send a coverage to Codecov
      id: codecov
      uses: codecov/codecov-action@v1
      with:
        # Note: file does not support environment value, context, and expression
        #file: ${{ .env.GITHUB_WORKSPACE }}/coverage.txt
        #file: ${GITHUB_WORKSPACE}/coverage.txt
        file: ./coverage.txt
        flags: unittests
        name: codecov
        fail_ci_if_error: false

    # TODO: 内容確認用（後で消す）
    # - name: Dump context envs
    #   id: dump-context-envs
    #   env:
    #     JOB_CONTEXT: ${{ toJson(job) }}
    #     STEPS_CONTEXT: ${{ toJson(steps) }}
    #   run: |
    #     echo GITHUB_ACTOR=$GITHUB_ACTOR
    #     echo GITHUB_REPOSITORY=$GITHUB_REPOSITORY
    #     echo GITHUB_EVENT_NAME=$GITHUB_EVENT_NAME
    #     echo GITHUB_WORKSPACE=$GITHUB_WORKSPACE
    #     echo GITHUB_SHA=$GITHUB_SHA
    #     echo GITHUB_REF=$GITHUB_REF
    #     echo GITHUB_HEAD_REF=$GITHUB_HEAD_REF
    #     echo GITHUB_BASE_REF=$GITHUB_BASE_REF
    #     echo JOB_CONTEXT=$JOB_CONTEXT
    #     echo STEPS_CONTEXT=$STEPS_CONTEXT

  benchmark:
    name: Benchmark with Go version ${{ matrix.go }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ 'ubuntu-latest' ]
        go: [ '1.13', '1.12' ]
    env:
      CI_BENCH_RESULT: .test/bench.new

    steps:
    - name: Set up Go ${{ matrix.go }}
      id: setup-go
      uses: actions/setup-go@v2-beta
      with:
        go-version: ${{ matrix.go }}

    - name: Check out code into the Go module directory
      id: checkout
      uses: actions/checkout@v2

    - name: Cache dependencies and tools
      id: cache
      uses: actions/cache@v1
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependency go modules
      id: mod-dl
      run: make mod-dl

    - name: Install go tools on module-aware mode
      id: mod-tools-install
      run: GOBIN=${GITHUB_WORKSPACE}/bin make mod-tools-install

    - name: Add GITHUB_WORKSPACE/bin into PATH
      id: add-gobin-path
      run: echo "::add-path::${GITHUB_WORKSPACE}/bin"

    - name: Run benchmarks
      id: bench
      run: make bench

    # FIXME: artifactにuploadしても新旧のベンチマーク比較は行えないので、
    # continuous benchmarkingの対策は別途必要
    - name: Upload a current benchmark result
      id: upload-bench-result
      uses: actions/upload-artifact@v1
      with:
        name: benchmark-result
        path: ${{ env.CI_BENCH_RESULT }}

    # TODO: 内容確認用（後で消す）
    # - name: Dump context envs
    #   id: dump-context-envs
    #   env:
    #     JOB_CONTEXT: ${{ toJson(job) }}
    #     STEPS_CONTEXT: ${{ toJson(steps) }}
    #   run: |
    #     echo GITHUB_ACTOR=$GITHUB_ACTOR
    #     echo GITHUB_REPOSITORY=$GITHUB_REPOSITORY
    #     echo GITHUB_EVENT_NAME=$GITHUB_EVENT_NAME
    #     echo GITHUB_WORKSPACE=$GITHUB_WORKSPACE
    #     echo GITHUB_SHA=$GITHUB_SHA
    #     echo GITHUB_REF=$GITHUB_REF
    #     echo GITHUB_HEAD_REF=$GITHUB_HEAD_REF
    #     echo GITHUB_BASE_REF=$GITHUB_BASE_REF
    #     echo JOB_CONTEXT=$JOB_CONTEXT
    #     echo STEPS_CONTEXT=$STEPS_CONTEXT
