name: CI

on:
  push:
    branches:
      - master
    paths-ignore:
      - '**/*.md'
      - 'LICENSE'
      - '**/.gitignore'
      - 'Dockerfile'
      - '.dockerignore'
  pull_request:
    paths-ignore:
      - '**/*.md'
      - 'LICENSE'
      - '**/.gitignore'
      - 'Dockerfile'
      - '.dockerignore'

env:
  # See: Makefile
  BENCHMARK_DIR: .test
  BENCHMARK_FILE: bench.new

jobs:
  test:
    name: Test with Go version ${{ matrix.go }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ 'ubuntu-latest' ]
        go: [ '1.13' ]

    steps:
    - id: setup-go
      name: Set up Go ${{ matrix.go }}
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go }}

    - id: checkout
      name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - id: cache
      name: Cache dependencies and tools
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - id: mod-dl
      name: Download dependency go modules
      run: make mod-dl

    - id: mod-tools-install
      name: Install go tools on module-aware mode
      run: GOBIN=${GITHUB_WORKSPACE}/bin make mod-tools-install

    - id: add-gobin-path
      name: Add GITHUB_WORKSPACE/bin into PATH
      run: echo "::add-path::${GITHUB_WORKSPACE}/bin"

    - id: ci
      name: Run tests and linters
      run: make ci

    - id: codecov
      name: Send a coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        file: ./coverage.txt
        flags: unittests
        name: codecov
        fail_ci_if_error: false


  benchmark:
    name: Benchmark with Go version ${{ matrix.go }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ 'ubuntu-latest' ]
        go: [ '1.13' ]
    env:
      BENCHSTAT_VS_MASTER: /tmp/benchstat-vs-master
      BENCHMARK_MASTER: BENCHMARK_MASTER.txt

    steps:
    - id: setup-go
      name: Set up Go ${{ matrix.go }}
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go }}

    - id: checkout
      name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - id: cache
      name: Cache dependencies and tools
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - id: mod-dl
      name: Download dependency go modules
      run: make mod-dl

    - id: mod-tools-install
      name: Install go tools on module-aware mode
      run: GOBIN=${GITHUB_WORKSPACE}/bin make mod-tools-install

    - id: add-gobin-path
      name: Add GITHUB_WORKSPACE/bin into PATH
      run: echo "::add-path::${GITHUB_WORKSPACE}/bin"

    - id: bench
      name: Run benchmarks
      run: make bench

    - id: upload-benchmark
      name: Upload a current benchmark result
      uses: actions/upload-artifact@v2
      with:
        name: benchmark-${{ matrix.go }}
        path: ${{ env.BENCHMARK_DIR }}/${{ env.BENCHMARK_FILE }}

    - id: benchstat-current-vs-master
      name: Run benchstat current vs master
      continue-on-error: true
      run: make benchstat-ci | tee ${{ env.BENCHSTAT_VS_MASTER }}

    # - id: upload-benchstat-vs-master
    #   name: Upload a benchstat-vsmaster result (only on pull_request)
    #   if: github.event_name == 'pull_request'
    #   continue-on-error: true
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: benchstat-vs-master
    #     path: ${{ env.BENCHSTAT_VS_MASTER }}


  ###
  # only on push to master
  ###
  draft-release:
    name: Draft release with Go version ${{ matrix.go }}
    needs: [test, benchmark]
    #if: github.event_name == 'push'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ 'ubuntu-latest' ]
        go: [ '1.13' ]
    env:
      BENCHMARK_MASTER: BENCHMARK_MASTER.txt

    steps:
    - id: checkout
      name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - id: download-benchmark
      name: Download a latest benchmark result
      continue-on-error: true
      uses: actions/download-artifact@v2
      with:
        name: benchmark-${{ matrix.go }}
        path: ${{ env.BENCHMARK_DIR }}

    - id: confirm-downloaded-benchmark
      name: Confirm downloaded benchmark result
      continue-on-error: true
      run: ls -lrt ${{ env.BENCHMARK_DIR }}

    - id: create-benchmark-master-txt
      name: Create BENCHMARK_MASTER.txt from latest benchmark result (only on push)
      continue-on-error: true
      #if: github.event_name == 'push'
      run: cp -f ${{ env.BENCHMARK_DIR }}/${{ env.BENCHMARK_FILE }} ${{ env.BENCHMARK_MASTER }}

    # See: https://stackoverflow.com/questions/57921401/push-to-origin-from-github-action
    - id: commit-push-benchmark-master
      name: Commit and push BENCHMARK_MASTER.txt (only on push)
      continue-on-error: true
      if: github.event_name == 'push'
      # FIXME: ブランチ保護を掛けているのでmasterへの直pushはエラーになる。代案が必要
      run: |
        pwd
        ls -l
        git config --global user.name 'goldeneggg'
        git config --global user.email 'jpshadowapps@gmail.com'
        git add ${{ env.BENCHMARK_MASTER }}
        git commit -m "Automated update benchmark report"
        git push

    - id: confirm-version
      name: Confirm version from version.go
      run: |
        v=$(make version)
        echo "::set-output name=version::${v}"

    - id: create-draft-release
      name: Create draft release (only on push)
      if: github.event_name == 'push'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: MAYBE-${{ steps.confirm-version.outputs.version }}
        release_name: Release MAYBE-${{ steps.confirm-version.outputs.version }}
        body: |
          Changes in this Release
          - TODO1
          - TODO2
        draft: true
        prerelease: false

    - id: dump-contexts-after
      name: Dump contexts After
      if: ${{ always() }}
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
        JOB_CONTEXT: ${{ toJson(job) }}
        STEPS_CONTEXT: ${{ toJson(steps) }}
        RUNNER_CONTEXT: ${{ toJson(runner) }}
        STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        MATRIX_CONTEXT: ${{ toJson(matrix) }}
      run: |
        echo ">>>>>>>>>> show GITHUB_CONTEXT"
        echo "$GITHUB_CONTEXT"
        echo ">>>>>>>>>> show JOB_CONTEXT"
        echo "$JOB_CONTEXT"
        echo ">>>>>>>>>> show STEPS_CONTEXT"
        echo "$STEPS_CONTEXT"
        echo ">>>>>>>>>> show RUNNER_CONTEXT"
        echo "$RUNNER_CONTEXT"
        echo ">>>>>>>>>> show STRATEGY_CONTEXT"
        echo "$STRATEGY_CONTEXT"
        echo ">>>>>>>>>> show MATRIX_CONTEXT"
        echo "$MATRIX_CONTEXT"
