name: CI

on:
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '**/.gitignore'
      - 'Dockerfile'
      - '.dockerignore'
      - '**.sample'
  pull_request:
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '**/.gitignore'
      - 'Dockerfile'
      - '.dockerignore'
      - '**.sample'

# env:
#   BENCHMARK_DIR: .test
#   BENCHMARK_FILE: bench.new

jobs:
  test:
    name: Test with Go version ${{ matrix.go }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ 'ubuntu-latest' ]
        go: [ '1.18' ]

    steps:
      - id: setup-go
        name: Set up Go ${{ matrix.go }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}

      - id: checkout
        name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - id: cache
        name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - id: mod-dl
        name: Download dependency go modules
        run: make dl

      - id: add-gobin-path
        name: Add GITHUB_WORKSPACE/bin into PATH
        # DEPRECATED: run: echo "::add-path::${GITHUB_WORKSPACE}/bin"
        run: echo "${GITHUB_WORKSPACE}/bin" >> $GITHUB_PATH

      - id: ci
        name: Run tests and linters
        run: make ci

      - id: codecov
        name: Send a coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage.txt
          flags: unittests
          name: codecov
          fail_ci_if_error: false

      - id: dump-contexts-after
        name: Dump contexts After
        if: ${{ always() }}
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
          JOB_CONTEXT: ${{ toJson(job) }}
          STEPS_CONTEXT: ${{ toJson(steps) }}
          RUNNER_CONTEXT: ${{ toJson(runner) }}
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: |
          echo ">>>>>>>>>> show GITHUB_CONTEXT"
          echo "$GITHUB_CONTEXT"
          echo ">>>>>>>>>> show JOB_CONTEXT"
          echo "$JOB_CONTEXT"
          echo ">>>>>>>>>> show STEPS_CONTEXT"
          echo "$STEPS_CONTEXT"
          echo ">>>>>>>>>> show RUNNER_CONTEXT"
          echo "$RUNNER_CONTEXT"
          echo ">>>>>>>>>> show STRATEGY_CONTEXT"
          echo "$STRATEGY_CONTEXT"
          echo ">>>>>>>>>> show MATRIX_CONTEXT"
          echo "$MATRIX_CONTEXT"

  gitleaks:
    name: Run gitleaks
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ 'ubuntu-latest' ]

    steps:
      - id: checkout
        name: Check out code into the Go module directory with checkout@v3
        # See: https://github.com/marketplace/actions/gitleaks
        uses: actions/checkout@v3

      - id: run-gitleaks
        name: Run gitleaks
        uses: zricethezav/gitleaks-action@master

      - id: dump-contexts-after
        name: Dump contexts After
        if: ${{ always() }}
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
          JOB_CONTEXT: ${{ toJson(job) }}
          STEPS_CONTEXT: ${{ toJson(steps) }}
          RUNNER_CONTEXT: ${{ toJson(runner) }}
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: |
          echo ">>>>>>>>>> show GITHUB_CONTEXT"
          echo "$GITHUB_CONTEXT"
          echo ">>>>>>>>>> show JOB_CONTEXT"
          echo "$JOB_CONTEXT"
          echo ">>>>>>>>>> show STEPS_CONTEXT"
          echo "$STEPS_CONTEXT"
          echo ">>>>>>>>>> show RUNNER_CONTEXT"
          echo "$RUNNER_CONTEXT"
          echo ">>>>>>>>>> show STRATEGY_CONTEXT"
          echo "$STRATEGY_CONTEXT"
          echo ">>>>>>>>>> show MATRIX_CONTEXT"
          echo "$MATRIX_CONTEXT"

  ###
  # only on push to master
  ###
  draft-release:
    name: Create draft release
    # if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    if: github.event_name == 'push'
    needs: [ test ]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ 'ubuntu-latest' ]
    # env:
    #   BENCHMARK_LATEST: BENCHMARK_LATEST.txt

    steps:
      - id: checkout
        name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - id: confirm-version
        name: Confirm version from version.go
        run: |
          v=$(make version)
          echo "::set-output name=master-version::${v}"

      # FIXME: move to benchmark.yml
      # - id: download-benchmark
      #   name: Download a current benchmark result
      #   continue-on-error: true
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: benchmark-${{ matrix.go }}
      #     path: ${{ env.BENCHMARK_DIR }}

      # - id: create-benchmark-latest-txt-on-bench-latest-branch
      #   name: Create BENCHMARK_LATEST.txt from current benchmark result with switching branch to bench-latest branch
      #   continue-on-error: true
      #   run: |
      #     ls -lrt ${{ env.BENCHMARK_DIR }}
      #     git fetch --all
      #     git branch -a
      #     git checkout -t origin/bench-latest
      #     cp -f ${{ env.BENCHMARK_DIR }}/${{ env.BENCHMARK_FILE }} ${{ env.BENCHMARK_LATEST }}
      #     git status -s

      # # See: https://stackoverflow.com/questions/57921401/push-to-origin-from-github-action
      # - id: commit-push-benchmark-latest
      #   name: Commit and push BENCHMARK_LATEST.txt to bench-latest branch (only on push)
      #   continue-on-error: true
      #   run: |
      #     pwd
      #     ls -l
      #     git config --global user.name 'goldeneggg'
      #     git config --global user.email 'jpshadowapps@gmail.com'
      #     git add ${{ env.BENCHMARK_LATEST }}
      #     git commit -m "Automated update latest benchmark report"
      #     git push origin bench-latest

      - id: create-draft-release
        name: Create draft release (only on push)
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.confirm-version.outputs.master-version }}
          release_name: Release v${{ steps.confirm-version.outputs.master-version }} (${{ github.ref }})
          body: |
            TODO
          draft: true
          prerelease: false
